{
    "type": "JupyterNotebook",
    "contentJson": {
        "cells": [
            {
                "cell_type": "code",
                "execution_count": 1,
                "metadata": {
                    "ExecuteTime": {
                        "end_time": "2021-08-20T13:51:05.101391Z",
                        "start_time": "2021-08-20T13:51:04.467549Z"
                    }
                },
                "outputs": [],
                "source": [
                    "import netCDF4 as nc\n",
                    "import requests\n",
                    "import pandas as pd\n",
                    "from pivottablejs import pivot_ui"
                ]
            },
            {
                "cell_type": "code",
                "execution_count": 2,
                "metadata": {
                    "ExecuteTime": {
                        "end_time": "2021-08-20T13:51:06.073407Z",
                        "start_time": "2021-08-20T13:51:06.069022Z"
                    }
                },
                "outputs": [],
                "source": [
                    "def download_ncss_file(url):\n",
                    "    local_filename = url.split('/')[-1].split('?')[0] + '.nc4'\n",
                    "    # NOTE the stream=True parameter below\n",
                    "    with requests.get(url, stream=True) as r:\n",
                    "        r.raise_for_status()\n",
                    "        with open(local_filename, 'wb') as f:\n",
                    "            for chunk in r.iter_content(chunk_size=8192): \n",
                    "                # If you have chunk encoded response uncomment if\n",
                    "                # and set chunk_size parameter to None.\n",
                    "                #if chunk: \n",
                    "                f.write(chunk)\n",
                    "    return local_filename"
                ]
            },
            {
                "cell_type": "code",
                "execution_count": 3,
                "metadata": {
                    "ExecuteTime": {
                        "end_time": "2021-08-20T13:51:19.551777Z",
                        "start_time": "2021-08-20T13:51:08.172747Z"
                    }
                },
                "outputs": [
                    {
                        "name": "stdout",
                        "output_type": "stream",
                        "text": [
                            "<class 'netCDF4._netCDF4.Dataset'>\n",
                            "root group (NETCDF4 data model, file format HDF5):\n",
                            "    classification_level: UNCLASSIFIED\n",
                            "    distribution_statement: Approved for public release. Distribution unlimited.\n",
                            "    downgrade_date: not applicable\n",
                            "    classification_authority: not applicable\n",
                            "    institution: Naval Oceanographic Office\n",
                            "    source: HYCOM archive file\n",
                            "    history: archv2ncdf3z ;\n",
                            "FMRC Run 2021-08-15T12:00:00Z Dataset\n",
                            "    field_type: instantaneous\n",
                            "    Conventions: CF-1.4, NAVO_netcdf_v1.1\n",
                            "    cdm_data_type: GRID\n",
                            "    featureType: GRID\n",
                            "    location: Proto fmrc:GOMu0.04_901m000_FMRC\n",
                            "    History: Translated to CF-1.0 Conventions by Netcdf-Java CDM (CFGridWriter2)\n",
                            "Original Dataset = fmrc:GOMu0.04_901m000_FMRC; Translation Date = 2021-08-20T13:51:08.639Z\n",
                            "    geospatial_lat_min: 18.1200008392334\n",
                            "    geospatial_lat_max: 31.920000076293945\n",
                            "    geospatial_lon_min: -98.0\n",
                            "    geospatial_lon_max: -76.4000244140625\n",
                            "    dimensions(sizes): time(1), lat(346), lon(541), depth(40)\n",
                            "    variables(dimensions): float32 \u001b[4msurf_el\u001b[0m(time,lat,lon), float64 \u001b[4mtime\u001b[0m(time), float64 \u001b[4mlat\u001b[0m(lat), float64 \u001b[4mlon\u001b[0m(lon), float32 \u001b[4msalinity\u001b[0m(time,depth,lat,lon), float64 \u001b[4mdepth\u001b[0m(depth), float32 \u001b[4mwater_temp\u001b[0m(time,depth,lat,lon), float32 \u001b[4mwater_u\u001b[0m(time,depth,lat,lon), float32 \u001b[4mwater_v\u001b[0m(time,depth,lat,lon)\n",
                            "    groups: \n",
                            "\n"
                        ]
                    }
                ],
                "source": [
                    "url = \"https://ncss.hycom.org/thredds/ncss/GOMu0.04/expt_90.1m000/FMRC/runs/GOMu0.04_901m000_FMRC_RUN_2021-08-15T12:00:00Z?var=surf_el&var=salinity&var=water_temp&var=water_u&var=water_v&disableLLSubset=on&disableProjSubset=on&horizStride=1&time=2021-08-17T00%3A00%3A00Z&vertCoord=&accept=netcdf4\"\n",
                    "local_filename = download_ncss_file(url)\n",
                    "ds = nc.Dataset(local_filename)\n",
                    "print(ds)"
                ]
            },
            {
                "cell_type": "code",
                "execution_count": 4,
                "metadata": {
                    "ExecuteTime": {
                        "end_time": "2021-08-20T13:51:32.416096Z",
                        "start_time": "2021-08-20T13:51:32.268731Z"
                    }
                },
                "outputs": [
                    {
                        "name": "stdout",
                        "output_type": "stream",
                        "text": [
                            "[[[[      nan       nan       nan ...       nan       nan       nan]\n",
                            "   [      nan       nan       nan ...       nan       nan       nan]\n",
                            "   [      nan       nan       nan ...       nan       nan       nan]\n",
                            "   ...\n",
                            "   [      nan       nan       nan ... 36.2      36.211002       nan]\n",
                            "   [      nan       nan       nan ... 36.198    36.208          nan]\n",
                            "   [      nan       nan       nan ... 36.196    36.206          nan]]\n",
                            "\n",
                            "  [[      nan       nan       nan ...       nan       nan       nan]\n",
                            "   [      nan       nan       nan ...       nan       nan       nan]\n",
                            "   [      nan       nan       nan ...       nan       nan       nan]\n",
                            "   ...\n",
                            "   [      nan       nan       nan ... 36.2      36.211002       nan]\n",
                            "   [      nan       nan       nan ... 36.197002 36.208          nan]\n",
                            "   [      nan       nan       nan ... 36.195    36.206          nan]]\n",
                            "\n",
                            "  [[      nan       nan       nan ...       nan       nan       nan]\n",
                            "   [      nan       nan       nan ...       nan       nan       nan]\n",
                            "   [      nan       nan       nan ...       nan       nan       nan]\n",
                            "   ...\n",
                            "   [      nan       nan       nan ... 36.2      36.211002       nan]\n",
                            "   [      nan       nan       nan ... 36.197002 36.208          nan]\n",
                            "   [      nan       nan       nan ... 36.195    36.206          nan]]\n",
                            "\n",
                            "  ...\n",
                            "\n",
                            "  [[      nan       nan       nan ...       nan       nan       nan]\n",
                            "   [      nan       nan       nan ...       nan       nan       nan]\n",
                            "   [      nan       nan       nan ...       nan       nan       nan]\n",
                            "   ...\n",
                            "   [      nan       nan       nan ...       nan       nan       nan]\n",
                            "   [      nan       nan       nan ...       nan       nan       nan]\n",
                            "   [      nan       nan       nan ...       nan       nan       nan]]\n",
                            "\n",
                            "  [[      nan       nan       nan ...       nan       nan       nan]\n",
                            "   [      nan       nan       nan ...       nan       nan       nan]\n",
                            "   [      nan       nan       nan ...       nan       nan       nan]\n",
                            "   ...\n",
                            "   [      nan       nan       nan ...       nan       nan       nan]\n",
                            "   [      nan       nan       nan ...       nan       nan       nan]\n",
                            "   [      nan       nan       nan ...       nan       nan       nan]]\n",
                            "\n",
                            "  [[      nan       nan       nan ...       nan       nan       nan]\n",
                            "   [      nan       nan       nan ...       nan       nan       nan]\n",
                            "   [      nan       nan       nan ...       nan       nan       nan]\n",
                            "   ...\n",
                            "   [      nan       nan       nan ...       nan       nan       nan]\n",
                            "   [      nan       nan       nan ...       nan       nan       nan]\n",
                            "   [      nan       nan       nan ...       nan       nan       nan]]]]\n"
                        ]
                    },
                    {
                        "name": "stderr",
                        "output_type": "stream",
                        "text": [
                            "/home/c3/.conda/envs/py-hycom_1_0_0/lib/python3.6/site-packages/ipykernel_launcher.py:4: RuntimeWarning: invalid value encountered in greater\n",
                            "  after removing the cwd from sys.path.\n"
                        ]
                    }
                ],
                "source": [
                    "lat = ds.variables['lat'][:]\n",
                    "lon = ds.variables['lon'][:]\n",
                    "depth = ds.variables['depth'][:]\n",
                    "salinity = ds.variables['salinity'][:]\n",
                    "print(salinity)"
                ]
            },
            {
                "cell_type": "code",
                "execution_count": 5,
                "metadata": {
                    "ExecuteTime": {
                        "end_time": "2021-08-20T13:51:37.109000Z",
                        "start_time": "2021-08-20T13:51:37.102353Z"
                    }
                },
                "outputs": [
                    {
                        "name": "stdout",
                        "output_type": "stream",
                        "text": [
                            "[18.12000084 18.15999985 18.20000076 18.23999977 18.28000069 18.31999969\n",
                            " 18.36000061 18.39999962 18.44000053 18.47999954 18.52000046 18.55999947\n",
                            " 18.60000038 18.63999939 18.68000031 18.71999931 18.76000023 18.79999924\n",
                            " 18.84000015 18.87999916 18.92000008 18.95999908 19.         19.04000092\n",
                            " 19.07999992 19.12000084 19.15999985 19.20000076 19.23999977 19.28000069\n",
                            " 19.31999969 19.36000061 19.39999962 19.44000053 19.47999954 19.52000046\n",
                            " 19.55999947 19.60000038 19.63999939 19.68000031 19.71999931 19.76000023\n",
                            " 19.79999924 19.84000015 19.87999916 19.92000008 19.95999908 20.\n",
                            " 20.04000092 20.07999992 20.12000084 20.15999985 20.20000076 20.23999977\n",
                            " 20.28000069 20.31999969 20.36000061 20.39999962 20.44000053 20.47999954\n",
                            " 20.52000046 20.55999947 20.60000038 20.63999939 20.68000031 20.71999931\n",
                            " 20.76000023 20.79999924 20.84000015 20.87999916 20.92000008 20.95999908\n",
                            " 21.         21.04000092 21.07999992 21.12000084 21.15999985 21.20000076\n",
                            " 21.23999977 21.28000069 21.31999969 21.36000061 21.39999962 21.44000053\n",
                            " 21.47999954 21.52000046 21.55999947 21.60000038 21.63999939 21.68000031\n",
                            " 21.71999931 21.76000023 21.79999924 21.84000015 21.87999916 21.92000008\n",
                            " 21.95999908 22.         22.04000092 22.07999992 22.12000084 22.15999985\n",
                            " 22.20000076 22.23999977 22.28000069 22.31999969 22.36000061 22.39999962\n",
                            " 22.44000053 22.47999954 22.52000046 22.55999947 22.60000038 22.63999939\n",
                            " 22.68000031 22.71999931 22.76000023 22.79999924 22.84000015 22.87999916\n",
                            " 22.92000008 22.95999908 23.         23.04000092 23.07999992 23.12000084\n",
                            " 23.15999985 23.20000076 23.23999977 23.28000069 23.31999969 23.36000061\n",
                            " 23.39999962 23.44000053 23.47999954 23.52000046 23.55999947 23.60000038\n",
                            " 23.63999939 23.68000031 23.71999931 23.76000023 23.79999924 23.84000015\n",
                            " 23.87999916 23.92000008 23.95999908 24.         24.04000092 24.07999992\n",
                            " 24.12000084 24.15999985 24.20000076 24.23999977 24.28000069 24.31999969\n",
                            " 24.36000061 24.39999962 24.44000053 24.47999954 24.52000046 24.55999947\n",
                            " 24.60000038 24.63999939 24.68000031 24.71999931 24.76000023 24.79999924\n",
                            " 24.84000015 24.87999916 24.92000008 24.95999908 25.         25.04000092\n",
                            " 25.07999992 25.12000084 25.15999985 25.20000076 25.23999977 25.28000069\n",
                            " 25.31999969 25.36000061 25.39999962 25.44000053 25.47999954 25.52000046\n",
                            " 25.55999947 25.60000038 25.63999939 25.68000031 25.71999931 25.76000023\n",
                            " 25.79999924 25.84000015 25.87999916 25.92000008 25.95999908 26.\n",
                            " 26.04000092 26.07999992 26.12000084 26.15999985 26.20000076 26.23999977\n",
                            " 26.28000069 26.31999969 26.36000061 26.39999962 26.44000053 26.47999954\n",
                            " 26.52000046 26.55999947 26.60000038 26.63999939 26.68000031 26.71999931\n",
                            " 26.76000023 26.79999924 26.84000015 26.87999916 26.92000008 26.95999908\n",
                            " 27.         27.04000092 27.07999992 27.12000084 27.15999985 27.20000076\n",
                            " 27.23999977 27.28000069 27.31999969 27.36000061 27.39999962 27.44000053\n",
                            " 27.47999954 27.52000046 27.55999947 27.60000038 27.63999939 27.68000031\n",
                            " 27.71999931 27.76000023 27.79999924 27.84000015 27.87999916 27.92000008\n",
                            " 27.95999908 28.         28.04000092 28.07999992 28.12000084 28.15999985\n",
                            " 28.20000076 28.23999977 28.28000069 28.31999969 28.36000061 28.39999962\n",
                            " 28.44000053 28.47999954 28.52000046 28.55999947 28.60000038 28.63999939\n",
                            " 28.68000031 28.71999931 28.76000023 28.79999924 28.84000015 28.87999916\n",
                            " 28.92000008 28.95999908 29.         29.04000092 29.07999992 29.12000084\n",
                            " 29.15999985 29.20000076 29.23999977 29.28000069 29.31999969 29.36000061\n",
                            " 29.39999962 29.44000053 29.47999954 29.52000046 29.55999947 29.60000038\n",
                            " 29.63999939 29.68000031 29.71999931 29.76000023 29.79999924 29.84000015\n",
                            " 29.87999916 29.92000008 29.95999908 30.         30.04000092 30.07999992\n",
                            " 30.12000084 30.15999985 30.20000076 30.23999977 30.28000069 30.31999969\n",
                            " 30.36000061 30.39999962 30.44000053 30.47999954 30.52000046 30.55999947\n",
                            " 30.60000038 30.63999939 30.68000031 30.71999931 30.76000023 30.79999924\n",
                            " 30.84000015 30.87999916 30.92000008 30.95999908 31.         31.04000092\n",
                            " 31.07999992 31.12000084 31.15999985 31.20000076 31.23999977 31.28000069\n",
                            " 31.31999969 31.36000061 31.39999962 31.44000053 31.47999954 31.52000046\n",
                            " 31.55999947 31.60000038 31.63999939 31.68000031 31.71999931 31.76000023\n",
                            " 31.79999924 31.84000015 31.87999916 31.92000008]\n"
                        ]
                    }
                ],
                "source": [
                    "print(lat)"
                ]
            },
            {
                "cell_type": "code",
                "execution_count": 7,
                "metadata": {
                    "ExecuteTime": {
                        "end_time": "2021-08-20T13:51:53.795659Z",
                        "start_time": "2021-08-20T13:51:53.787597Z"
                    }
                },
                "outputs": [
                    {
                        "data": {
                            "text/html": [
                                "\n",
                                "        <iframe\n",
                                "            width=\"100%\"\n",
                                "            height=\"500\"\n",
                                "            src=\"pivottablejs.html\"\n",
                                "            frameborder=\"0\"\n",
                                "            allowfullscreen\n",
                                "        ></iframe>\n",
                                "        "
                            ],
                            "text/plain": [
                                "<IPython.lib.display.IFrame at 0x7f34a8fb50f0>"
                            ]
                        },
                        "execution_count": 7,
                        "metadata": {},
                        "output_type": "execute_result"
                    }
                ],
                "source": [
                    "df = pd.DataFrame({'lon': lon})\n",
                    "pivot_ui(df)"
                ]
            },
            {
                "cell_type": "code",
                "execution_count": null,
                "metadata": {},
                "outputs": [],
                "source": []
            }
        ],
        "metadata": {
            "has_local_update": false,
            "is_local": true,
            "is_remote": true,
            "kernelspec": {
                "display_name": "py-hycom_1_0_0",
                "language": "Python",
                "name": "py-hycom_1_0_0"
            },
            "language_info": {
                "codemirror_mode": {
                    "name": "ipython",
                    "version": 3
                },
                "file_extension": ".py",
                "mimetype": "text/x-python",
                "name": "python",
                "nbconvert_exporter": "python",
                "pygments_lexer": "ipython3",
                "version": "3.6.13"
            },
            "last_sync_time": "2021-08-20T13:46:55.624438"
        },
        "nbformat": 4,
        "nbformat_minor": 4
    },
    "name": "hycom-sample.ipynb",
    "id": "ffd28ca0-ae5c-44d6-a5e5-b00517f56a85",
    "path": "rfp2/tomlin/hycom-sample.ipynb",
    "jupyterContentType": "notebook",
    "format": "json",
    "writable": false,
    "contentSize": 12403,
    "typeIdent": "NTBK",
    "acl": [
        {
            "canUpdate": false,
            "canRemove": false,
            "canModifyAcl": false,
            "member": {
                "id": "C3.Group.DataScience"
            }
        }
    ],
    "mlProject": "C3ai_Tutorials"
}